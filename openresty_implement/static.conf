worker_processes 1;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type text/plain;
  charset utf-8;
  sendfile on;
  keepalive_timeout 65;
  access_log logs/access.log;
  error_log logs/error.log;

  # https://github.com/yuweizzz/zstd-ffi.git
  lua_package_path '/usr/local/src/zstd-ffi/?.lua;;';
  lua_shared_dict dictionaries 32m;
  init_worker_by_lua_block {
    -- static resources
    local dict_locations = {
      "/var/www/jquery-2.2.4.min.js",
      "/var/www/jquery-3.7.1.min.js"
    }
    local resty_sha256 = require("resty.sha256")
    local dict_location
    for _, dict_location in pairs(dict_locations)
    do
      local sha256 = resty_sha256:new()
      local dict = io.open(dict_location, "rb")
      local dict_content = dict:read("*a")
      sha256:update(dict_content)
      local digest = sha256:final()
      local checksum = ":" .. ngx.encode_base64(digest) .. ":"
      local mem = ngx.shared.dictionaries
      mem:set(checksum, dict_content)
    end
  }

  server {
    http2 on;
    listen 4444 ssl;
    server_name localhost;
    root /var/www;

    ssl_certificate /usr/local/openresty/nginx/conf/cert.pem;
    ssl_certificate_key /usr/local/openresty/nginx/conf/cert.key;

    location ~* ^/jquery-.*\.js$ {
      header_filter_by_lua_block {
        local accept_zstd, accept_dcz
        local accept_encoding = ngx.var.http_accept_encoding
        if string.find(accept_encoding, "zstd") then
          accept_zstd = true
        end
        if string.find(accept_encoding, "dcz") then
          accept_dcz = true
        end

        local sec_fetch_dest = ngx.var.http_sec_fetch_dest
        if sec_fetch_dest and sec_fetch_dest == "document" then
          -- ngx.header["Use-As-Dictionary"] = 'match="' .. ngx.var.uri .. '", match-dest=("document")'
          ngx.header["Use-As-Dictionary"] = 'match="/jquery-*.js", match-dest=("document")'
        else
          accept_dcz = false
        end

        local mem = ngx.shared.dictionaries
        local dict_checksum = ngx.var.http_available_dictionary
        local dict, _ = mem:get(dict_checksum)
        if not dict then
          accept_dcz = false
        end

        local compressor, err
        if accept_dcz then
          compressor, err = require("zstd.compressor").new({dictionary = dict, use_raw = true})
          if err then
            return
          end
          ngx.header["Content-Encoding"] = "dcz"
          ngx.header["Vary"] = "Accept-Encoding, Available-Dictionary"
          ngx.ctx.digest = ngx.decode_base64(string.gsub(dict_checksum, ":", ""))
          accept_zstd = false
        end

        if accept_zstd then
          compressor, err = require("zstd.compressor").new()
          if err then
            return
          end
          ngx.header["Content-Encoding"] = "zstd"
          ngx.header["Vary"] = "Accept-Encoding"
        end

        ngx.header.content_length = nil
        ngx.ctx.accept_encoding = true
        ngx.ctx.compressor = compressor
        ngx.ctx.first_chunk = 1
      }

      body_filter_by_lua_block {
        if not ngx.ctx.accept_encoding then
          return
        end
        local chunk, eof = ngx.arg[1], ngx.arg[2]
        local compressor = ngx.ctx.compressor
        if type(chunk) == "string" and chunk ~= "" then
          local encode_chunk = compressor:compress(chunk)
          if ngx.ctx.first_chunk == 1 and ngx.header["Content-Encoding"]  == "dcz" then
            local hex_to_char = string.char(94, 42, 77, 24, 32, 0, 0, 0)
            ngx.arg[1] = hex_to_char .. ngx.ctx.digest .. encode_chunk
            ngx.ctx.first_chunk = 0
          else
            ngx.arg[1] = encode_chunk
          end
        end

        if eof then
          local end_chunk = compressor:end_stream()
          ngx.arg[1] = ngx.arg[1] .. end_chunk
          compressor:free()
        end
      }
    }
  }
}
